#
#   Narayan Designer, a modelling tool for the Narayan simulation engine.
#   Copyright (C) 2017-2018 Cartesian Theatre. All rights reserved.
#

# Run the requested make target recursively on child makefiles. By default
#  Automake generates Makefiles that recurse in depth-first postfix order, but
#  we need to build current directory first, so the . changes to prefix
#  ordering. It is customary to list unit tests last since they are meant to
#  test what was constructed (Automake manual ยง7.1)...
SUBDIRS =           \
    .               \
    Translations    \
    Tests

# Preprocessor definitions to pass down to the compiler...
DEFS=
DEFS+= -DSYSCONFDIR='"$(sysconfdir)"' -DLOCALEDIR="\"$(localedir)\"" @DEFS@

# Product list containing only narayan-designer to be destined for the binary
#  prefix...
bin_PROGRAMS = narayan-designer

# narayan-designer product option variables containing list of sources that need
#  to be compiled and linked to produce the product...
narayan_designer_SOURCES =                                                      \
    $(lexer_unclobbered_source_full_paths)                                      \
    $(parser_unclobbered_source_full_paths)                                     \
    Source/GUI/AboutDialog.cpp                                                  \
    Source/GUI/AboutDialog.h                                                    \
    Source/GUI/MainWindow.cpp                                                   \
    Source/GUI/MainWindow.h                                                     \
    Source/GUI/PreferencesDialog.cpp                                            \
    Source/GUI/PreferencesDialog.h                                              \
    Source/GUI/UnitEditorDialog.cpp                                             \
    Source/GUI/UnitEditorDialog.h                                               \
    Source/Main/gettext.h                                                       \
    Source/Main/Main.cpp                                                        \
    Source/Main/NarayanDesignerApplication.cpp                                  \
    Source/Main/NarayanDesignerApplication.h                                    \
    Source/Patterns/ExplicitSingleton.h

# Don't redistribute the resources files which are large and generated by
#  glib-compile-resources(1)...
nodist_narayan_designer_SOURCES =                                               \
    Source/GUI/Resources.cpp                                                    \
    Source/GUI/Resources.h

# Get build flags...
narayan_designer_CFLAGS     = $(AM_CFLAGS)
narayan_designer_CXXFLAGS   = $(AM_CXXFLAGS)
narayan_designer_LDFLAGS    = $(AM_LDFLAGS)
narayan_designer_LDADD      = $(AM_LDFLAGS) liblexerparser.la

# Preprocessor flags. Note that the include search paths are paired between
#  source and build directory as per Automake manual ยง8.7 to facilitate VPATH
#  builds...
narayan_designer_CPPFLAGS   =                                                   \
    -DSYSCONFDIR='"$(sysconfdir)"'                                              \
    -I$(srcdir)/Source/                                                         \
    -I$(builddir)/Source/                                                       \
    -I$(srcdir)/Source/Compiler/                                                \
    -I$(builddir)/Source/Compiler/                                              \
    $(AM_CPPFLAGS)

# Source files for NarayanLogic lexer clobbered by each flexc++(1) invocation.
#  These should always be created within $(builddir)...
lexer_clobbered_source_files_only =                                             \
    NarayanLogicLexerBase.cpp                                                   \
    NarayanLogicLexerBase.h

lexer_clobbered_source_full_paths =                                             \
    Source/Compiler/NarayanLogicLexerBase.cpp                                   \
    Source/Compiler/NarayanLogicLexerBase.h

# Source files for NarayanLogic lexer generated once by flexc++(1), but
#  subsequently owned by the user. These should always be maintained within
#  $(sourcedir)...
lexer_unclobbered_source_files_only =                                           \
    NarayanLogicLexer.h                                                         \
    NarayanLogicLexer.ih

lexer_unclobbered_source_full_paths =                                           \
    Source/Compiler/NarayanLogicLexer.h                                         \
    Source/Compiler/NarayanLogicLexer.ih

# Source files for NarayanLogic parser clobbered by each bisonc++(1) invocation.
#  These should always be created within $(builddir)...
parser_clobbered_source_files_only =                                            \
    NarayanLogicParserBase.h                                                    \
    NarayanLogicParser.cpp

parser_clobbered_source_full_paths =                                            \
    Source/Compiler/NarayanLogicParserBase.h                                    \
    Source/Compiler/NarayanLogicParser.cpp

# Source files for NarayanLogic parser generated once by bisonc++(1), but
#  subsequently owned by the user. These should always be maintained within
#  $(sourcedir)...
parser_unclobbered_source_files_only =                                          \
    NarayanLogicParser.h                                                        \
    NarayanLogicParser.ih

parser_unclobbered_source_full_paths =                                          \
    Source/Compiler/NarayanLogicParser.h                                        \
    Source/Compiler/NarayanLogicParser.ih

# Both flexc++(1) and bisonc++(1) at the time of writing emit code that can
#  raise warnings, or even errors in the case of -Werror, when used with GCC 7
#  series compilers. I have submitted a number of patches to upstream with
#  varying degrees of success to address various issues. In the interim, the
#  best thing to do is to compartmentalize the necessary compilation flags for
#  code emitted by these two tools into a static libtool convenience library. 
#  This has the benefit of isolating the potential harm within the convenience
#  library that may have spilled over to other application code whenever
#  explicitly disabling useful safety measures, such as -Wall -Werror -Wshadow
#  -Wextra switches that raise issues like switch-case fall throughs, unused
#  variables, and so forth...
noinst_LTLIBRARIES = liblexerparser.la
liblexerparser_la_SOURCES   =                                                   \
    $(lexer_clobbered_source_full_paths)                                        \
    $(parser_clobbered_source_full_paths)
liblexerparser_la_CXXFLAGS  = -Wimplicit-fallthrough=0 -Wno-unused-parameter
liblexerparser_la_CPPFLAGS  =                                                   \
    -DSYSCONFDIR='"$(sysconfdir)"'                                              \
    -I$(srcdir)/Source/Compiler/                                                \
    -I$(builddir)/Source/Compiler/                                              \
    -I$(srcdir)/Source/Main/                                                    \
    -I$(builddir)/Source/Main/                                                  \
    $(AM_CPPFLAGS)

# Product option variables for list of source not to be distributed because
#  they are machine generated...
#  Note: Migrated into libtool convenience library until upstream 
#  {flex,bison}c++(1) fix all reported issues...
#nodist_narayan_designer_SOURCES =                              \
#    $(lexer_clobbered_source_full_paths)                       \
#    $(parser_clobbered_source_full_paths)

# Extend silent mode for flexc++(1) inputs per Automake manual ยง21.3...
AX_V_FLEXCPP = $(AX_V_FLEXCPP_@AM_V@)
AX_V_FLEXCPP_ = $(AX_V_FLEXCPP_@AM_DEFAULT_V@)
AX_V_FLEXCPP_0 = @echo "  FLEXCPP  $(lexer_clobbered_source_full_paths)";

# Extend silent mode for bisonc++(1) inputs per Automake manual ยง21.3...
AX_V_BISONCPP = $(AX_V_BISONCPP_@AM_V@)
AX_V_BISONCPP_ = $(AX_V_BISONCPP_@AM_DEFAULT_V@)
AX_V_BISONCPP_0 = @echo "  BISONCPP $(parser_clobbered_source_full_paths)";

# Temporary directory to place flexc++(1) and bisonc++(1) generated files...
COMPILER_TMP=$(builddir)/Source/Compiler/tmp

# Locale directory...
localedir = $(datadir)/locale

# Location for application data...
applicationsdir = $(datarootdir)/applications

# Example files...
examplesdir=$(docdir)/examples
examples_DATA = \
    $(srcdir)/Data/Examples/Simple.narayan

# Location for desktop data...
desktopdir = $(datadir)/applications

# Application data that should not be installed...
dist_noinst_DATA = $(srcdir)/Data/com.cartesiantheatre.narayan-designer.desktop.in.in

# Desktop data includes desktop entry. Unit tests need this, so export it...
desktop_DATA = $(builddir)/Data/com.cartesiantheatre.narayan-designer.desktop
export desktop_DATA

# Standard prefix for icon themes...
iconthemedir = $(datadir)/icons/hicolor

# Subdirectories for application icon of varying dimensions...
appicon48dir = $(iconthemedir)/48x48/apps
appiconscalabledir = $(iconthemedir)/scalable/apps
appiconsymbolicdir = $(iconthemedir)/symbolic/apps
dist_appicon48_DATA =                                                           \
	$(srcdir)/Data/Artwork/Icons/48x48/apps/com.cartesiantheatre.narayan-designer.png
dist_appiconscalable_DATA =                                                     \
	$(srcdir)/Data/Artwork/Icons/scalable/apps/com.cartesiantheatre.narayan-designer.svg
dist_appiconsymbolic_DATA =                                                     \
	$(srcdir)/Data/Artwork/Icons/symbolic/apps/com.cartesiantheatre.narayan-designer.svg

# Miscellaneous data files...
dist_pkgdata_DATA =                                                             \
    Authors                                                                     \
    News                                                                        \
    ReadMe

# System manual pages...
man1_MANS = Manual/narayan-designer.man

# Mime XML descriptor per fd.o's shared-mime-info-spec...
mimedir = $(datarootdir)/mime/packages
dist_mime_DATA = Data/narayan-designer.xml

# Bash completion script...
bash_completiondir=$(datarootdir)/bash-completion/completions/
if USE_BASH_COMPLETION
bash_completion_DATA = Manual/narayan-designer
else
bash_completion_DATA =
endif

# There isn't any way I know of to add glib-compile-resources(1) dynamically
#  generated dependency rules at build time in a portable manner. Every example
#  I can find incorporates its output into the generated source's target
#  dependency list via a non-portable $(shell ) construct. For the time being,
#  just manually list the contents referenced in the ...gsettings.xml file...
GRESOURCE_LIST =                                                                \
    $(srcdir)/Data/Artwork/Icons/48x48/apps/com.cartesiantheatre.narayan-designer.png   \
    $(srcdir)/Data/Artwork/Icons/48x48/actions/report-bug.png                   \
    $(srcdir)/Data/Artwork/Icons/scalable/categories/broken-heart.svg           \
    $(srcdir)/Data/Artwork/AboutDialog.png                                      \
    $(srcdir)/Data/GtkBuilder/AboutDialog.ui                                    \
    $(srcdir)/Data/GtkBuilder/MainWindow.ui                                     \
    $(srcdir)/Data/GtkBuilder/Menus.ui                                          \
    $(srcdir)/Data/GtkBuilder/PreferencesDialog.ui                              \
    $(srcdir)/Data/GtkBuilder/UnitEditorDialog.ui

# GSettings schema. Note that for some reason the expansion of the
#  GLIB_GSETTINGS macro seems to know to find this within the srcdir and not
#  builddir. If we explicitly prefix with the 
#  $(srcdir)/Data/com.cartesiantheatre..., though technically more correct,
#  then the gschema.valid stamp ends up getting placed in the srcdir which
#  defeats the purpose of remote builds. I'm not sure if this was intentional
#  behaviour on the part of the GLIB_GSETTINGS macro author...
gsettings_SCHEMAS = Data/com.cartesiantheatre.narayan-designer.gschema.xml

# List of files to clean up during clean target...
CLEANFILES =                                                                    \
    Data/com.cartesiantheatre.narayan-designer.desktop.in                       \
    Data/com.cartesiantheatre.narayan-designer.desktop                          \
    Data/gschemas.compiled                                                      \
    Source/GUI/Resources.cpp                                                    \
    Source/GUI/Resources.h                                                      \
    Source/Compiler/lexer.stamp                                                 \
    Source/Compiler/parser.stamp                                                \
    $(lexer_clobbered_source_full_paths)                                        \
    $(parser_clobbered_source_full_paths)                                       \
	Translations/*.gmo

# Additional files left behind during dist target that need to be cleaned...
DISTCLEANFILES =                                                                \
    Source/Compiler/lexer.stamp                                                 \
    Source/Compiler/parser.stamp                                                \
    Source/GUI/Resources.cpp                                                    \
    Source/GUI/Resources.h                                                      \
	_configs.sed                                                                \
    $(PACKAGE_TARNAME)-$(PACKAGE_VERSION).tar.*

# These files must exist before anything is compiled. Can be machine
#  generated...
BUILT_SOURCES =                                                                 \
    Data/gschemas.compiled                                                      \
    Source/Compiler/lexer.stamp                                                 \
    Source/Compiler/parser.stamp                                                \
    $(lexer_clobbered_source_full_paths)                                        \
    $(parser_clobbered_source_full_paths)                                       \
    Source/GUI/Resources.cpp                                                    \
    Source/GUI/Resources.h                                                      \
    Source/Main/Version.h

# Manually add these non-source files to distribution package when dist target is run...
EXTRA_DIST =                                                                    \
    Data/com.cartesiantheatre.narayan-designer.desktop.in.in                    \
    Data/com.cartesiantheatre.narayan-designer.gresource.xml                    \
    $(examples_DATA)                                                            \
    Data/narayan-designer.xml                                                   \
	Manual/narayan-designer                                                     \
    Source/Compiler/NarayanLogicLexer.lpp                                       \
    Source/Compiler/NarayanLogicParser.ypp                                      \
    Authors                                                                     \
    ChangeLog                                                                   \
    Copying                                                                     \
    $(GRESOURCE_LIST)                                                           \
    $(gsettings_SCHEMAS)                                                        \
    Install                                                                     \
    News                                                                        \
    ReadMe

# Make sure gettext is present...
check-gettext:
	@if test x$(USE_NLS) != "xyes" ; then echo "Missing gettext. Re-run configure and check for" \
	"'checking whether to use NLS... yes'!" ; exit 1 ; fi

# Generate a .desktop file from template and translation catalogue...
Data/com.cartesiantheatre.narayan-designer.desktop: $(builddir)/Data/com.cartesiantheatre.narayan-designer.desktop.in
	@$(MKDIR_P) $(@D)
	$(AM_V_GEN)$(MSGFMT) --desktop --template $< -d $(srcdir)/Translations -o $@

# Compile the GSettings schema within the tree so we can run the binary without
#  installing it. The rules Automake imports from gsettings.m4 re-compiles this
#  schema again out of the build tree into the installation prefix at install
#  time...
Data/gschemas.compiled: Data/com.cartesiantheatre.narayan-designer.gschema.valid
	$(AM_V_GEN)$(GLIB_COMPILE_SCHEMAS) --targetdir=Data $(srcdir)/Data

# Before we prepare a distribution, run this hook...
dist-hook:
	$(RM) -r `find $(distdir) -name .git`
	$(RM) -r `find $(distdir) -name .hg`
	$(RM) -r `find $(distdir) -name .svn`

# Force an update to the machine dependent message catalogs...
force-update-gmo: check-gettext
	find Translations/ -type f -name "*.po" -execdir touch {} \;
	cd Translations && $(MAKE) $(AM_MAKEFLAGS) update-gmo

# Insert GSettings compilation rules...
@GSETTINGS_RULES@

# Before installing, update the mime and icon cache databases...
install-data-hook: update-caches

# Maintainer clean local hook to remove Autotools configuration output files...
maintainer-clean-local:
	$(RM) -r '$(srcdir)/autom4te.cache'

# Update mime and desktop databases...
update-caches:
if UPDATE_CACHES
	test -n "$(DESTDIR)" || $(UPDATE_ICON_CACHES) --ignore-theme-index --force $(iconthemedir)
	if [ -f $(DESTDIR)$(datadir)/mime/packages/freedesktop.org.xml ] ; then \
		$(UPDATE_MIME_DATABASE) $(DESTDIR)$(datarootdir)/mime; \
	fi
	if [ -f $(DESTDIR)$(applicationsdir)/defaults.list ] ; then \
		$(UPDATE_DESKTOP_DATABASE) --verbose $(applicationsdir); \
	fi
else
	@true
endif

# Update the mime, icon, and desktop cache database...
uninstall-hook: update-caches

# Force a rebuild of all embedded resources...
rebuild-resources:
	touch $(srcdir)/Data/com.cartesiantheatre.narayan-designer.gresource.xml
	$(MAKE) $(AM_MAKEFLAGS) Source/GUI/Resources.cpp Source/GUI/Resources.h

# Generate the Narayan Logic lexer source from its regular expression token
#  descriptions via flexc++, using that file as a witness. After that generate
#  a stamp target for the entire set of derived lexer files...
$(lexer_clobbered_source_full_paths): Source/Compiler/lexer.stamp
Source/Compiler/lexer.stamp: Source/Compiler/NarayanLogicLexer.lpp Source/Compiler/parser.stamp
	@$(MKDIR_P) $(COMPILER_TMP)
	$(AX_V_FLEXCPP)$(FLEXCPP) --target-directory=$(COMPILER_TMP) $<
	@for lexer_file in $(lexer_clobbered_source_files_only); do \
		mv $(COMPILER_TMP)/$$lexer_file Source/Compiler/; \
	done
	@rm -Rf $(COMPILER_TMP)
	@echo "timestamp for $^" > $@

# Generate the Narayan Logic parser source from its Backus-Naur grammar rules
#  via bisonc++, using that file as a witness. After that generate a stamp 
#  target for the entire set of derived lexer files...
$(parser_clobbered_source_full_paths): Source/Compiler/parser.stamp
Source/Compiler/parser.stamp: Source/Compiler/NarayanLogicParser.ypp
	@$(MKDIR_P) $(COMPILER_TMP)
	$(AX_V_BISONCPP)$(BISONCPP) --target-directory=$(COMPILER_TMP) $<
	@for parser_file in $(parser_clobbered_source_files_only); do \
		mv $(COMPILER_TMP)/$$parser_file Source/Compiler/; \
	done
	@rm -Rf $(COMPILER_TMP)
	@echo "timestamp for $^" > $@

# All user interface related data files compiled into C++ code via
#  glib-compile-resources(1). Create the source and header file...
Source/GUI/Resources.cpp Source/GUI/Resources.h: $(srcdir)/Data/com.cartesiantheatre.narayan-designer.gresource.xml $(GRESOURCE_LIST)
	@$(MKDIR_P) $(@D)
	$(AM_V_GEN) glib-compile-resources --target=$@ --sourcedir=$(srcdir)/Data --generate --c-name narayan_designer $<

# Update the machine dependent message catalogs...
update-gmo: check-gettext
	cd Translations && $(MAKE) $(AM_MAKEFLAGS) update-gmo

# Update the list of files to translate in POTFILES.in and then update the .pot
#  message translation template file..
update-po: check-gettext
	@echo "Checking if POTFILES.in needs to be updated..."
	@cd $(srcdir) ; \
	find Data \( -iname "*.desktop.in.in" \) -print > Translations/POTFILES.in.2 ; \
	find Data \( -iname "*.gschema.xml" \) -print >> Translations/POTFILES.in.2 ; \
	find Data \( -iname "*.ui" \) -print >> Translations/POTFILES.in.2 ; \
	find Source \( -iname "*.lpp" -o -iname "*.ypp" \) -print >> Translations/POTFILES.in.2 ; \
	find Source \( -iname "*.cpp" -o -iname "*.cpp.in" \) -print >> Translations/POTFILES.in.2 ; \
	find Source \( -iname "*.h" -o -iname "*.h.in" -o -iname "*.ih" \) -print >> Translations/POTFILES.in.2 ; \
	$(SED) -i '/config.h$$/d' Translations/POTFILES.in.2 ; \
	$(SED) -i '/NarayanLogicLexerBase.cpp/d' Translations/POTFILES.in.2 ; \
	$(SED) -i '/NarayanLogicLexerBase.h/d' Translations/POTFILES.in.2 ; \
	$(SED) -i '/NarayanLogicParserBase.h/d' Translations/POTFILES.in.2 ; \
	$(SED) -i '/NarayanLogicParser.cpp/d' Translations/POTFILES.in.2 ; \
	$(SED) -i '/Version.h$$/d' Translations/POTFILES.in.2 ; \
	$(SORT) Translations/POTFILES.in.2 --output=Translations/POTFILES.in.2 ; \
	if diff Translations/POTFILES.in Translations/POTFILES.in.2 >/dev/null 2>&1 ; then \
		echo "No update to POTFILES.in required..." ; \
		$(RM) -f Translations/POTFILES.in.2 ; \
	else \
		echo "POTFILES.in updated..." ; \
		mv -v Translations/POTFILES.in.2 Translations/POTFILES.in ; \
	fi
	cd Translations && $(MAKE) $(AM_MAKEFLAGS) update-po

# Targets which aren't actually files...
.PHONY: check-gettext force-update-gmo maintainer-clean-local rebuild-resources update-gmo update-po

