/*
    Narayan Designer, a modelling tool for the Narayan simulation engine.
    Copyright (C) 2017 Cartesian Theatre. All rights reserved.
*/

// Multiple include protection...
#ifndef _NARAYAN_LOGIC_PARSER_IH_
#define _NARAYAN_LOGIC_PARSER_IH_

// Includes...

    // Provided by Autoconf...
    #include <config.h>

    // Parser user class...
    #include "NarayanLogicParser.h"

    // Standard C++ / POSIX system headers...
    #include <cmath>
    #include <sstream>

    // i18n...
    #include "gettext.h"
    #define _(str) gettext (str)
    #define N_(str) gettext_noop (str)

// Constructor expecting path to input file...
NarayanLogicParser::NarayanLogicParser(const std::string &InputFile)
    : d_scanner(InputFile, "")
{
    /*
        TODO: Lexer can't detect non-existant files, so open input stream for it
              and validate before constructing the object.
    */
}

// Called whenever the parser encounters a syntax error...
inline void NarayanLogicParser::error()
{
    std::cerr << "Syntax error\n";
}

// $insert lex
inline int NarayanLogicParser::lex()
{
    return d_scanner.lex();
}

inline void NarayanLogicParser::print()         
{
    print__();           // displays tokens if --print was specified
}

// An exception has been thrown by a semantic action...
inline void NarayanLogicParser::exceptionHandler(const std::exception &Exception)
{
    // Prepend the input file name and offending line number into the exception
    //  string...
    std::stringstream ErrorMessage;
    ErrorMessage << d_scanner.d_filename << ":" << d_loc__.first_line << ": " << Exception.what();

    // Convert into a runtime error...
    const std::runtime_error  RuntimeException(ErrorMessage.str());
    
    // Propogate exception up...
    throw RuntimeException;
}

/*
    Add here includes that are only required for the compilation of
    NarayanLogicParser's sources.
*/

// Multiple include protection...
#endif

