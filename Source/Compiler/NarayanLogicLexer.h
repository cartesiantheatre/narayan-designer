// Generated by Flexc++ V2.06.02 on Thu, 17 Aug 2017 19:54:27 -0700

#ifndef NarayanLogicLexer_H_INCLUDED_
#define NarayanLogicLexer_H_INCLUDED_

// $insert baseclass_h
#include "NarayanLogicLexerBase.h"


// $insert classHead
class NarayanLogicLexer: public NarayanLogicLexerBase
{
    public:
        explicit NarayanLogicLexer(std::istream &in = std::cin,
                                std::ostream &out = std::cout);

        NarayanLogicLexer(std::string const &infile, std::string const &outfile);
        
        // $insert lexFunctionDecl
        int lex();

    private:
        int lex__();
        int executeAction__(size_t ruleNr);

        void print();
        void preCode();     // re-implement this function for code that must 
                            // be exec'ed before the patternmatching starts

        void postCode(PostEnum__ type);    
                            // re-implement this function for code that must 
                            // be exec'ed after the rules's actions.
};

// $insert scannerConstructors
inline NarayanLogicLexer::NarayanLogicLexer(std::istream &in, std::ostream &out)
:
    NarayanLogicLexerBase(in, out)
{}

inline NarayanLogicLexer::NarayanLogicLexer(std::string const &infile, std::string const &outfile)
:
    NarayanLogicLexerBase(infile, outfile)
{}

// $insert inlineLexFunction
inline int NarayanLogicLexer::lex()
{
    return lex__();
}

inline void NarayanLogicLexer::preCode() 
{
    // optionally replace by your own code
}

inline void NarayanLogicLexer::postCode(PostEnum__ type) 
{
    // optionally replace by your own code
    (void)(type);
}

inline void NarayanLogicLexer::print() 
{
    print__();
}


#endif // NarayanLogicLexer_H_INCLUDED_

